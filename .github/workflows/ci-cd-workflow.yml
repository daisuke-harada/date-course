name: ci-cd-workflow
on:
  pull_request:
    branches:
      - master
    types: [closed]
env:
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
  AWS_REGION: ap-northeast-1
  ECS_WEBAPP_SERVICE: datecourses-frontend
  ECS_BACKEND_SERVICE: datecourses-backend
  WEBAPP_CONTAINER_NAME: datecourses-frontend
  BACKEND_CONTAINER_NAME: datecourses-backend
  WEBAPP_TAG: 1.0.0
  BACKEND_TAG: 1.0.0
jobs:
  backend_test:
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.0.23
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: password
        options:
          -e MYSQL_ROOT_PASSWORD=password --entrypoint sh mysql:8.0.23 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
    container:
      image: ruby:3.0.3
    steps:
      - uses: actions/checkout@v2
      - name: setup
        run: |
          cd backend
          gem install bundler
          bundle install
      - name: setup migrate
        run: |
          cd backend
          rails db:create
          rails db:migrate
          rails db:seed
      - name: run rubocop
        run: rubocop --fail-level W --display-only-fail-level-offenses
      - name: run rspec
        run: |
          cd backend
          rspec
  e2e_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup Frontend App
        run: |
          cd frontend
          yarn
          yarn build
          yarn start &
      - uses: cypress-io/github-action@v2
        with:
          # Next.js (http://localhost:3000) の起動を待つ
          wait-on: "http://localhost:3000"
          # Cypress を ./e2e/ に配置しているため、working-directoryを指定する
          # デフォルトはルートディレクトリ
          working-directory: e2e
  deploy: # ここからdeployå
    needs: [e2e_test, backend_test]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: webapp push to ECR
      id: build-image-webapp
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG .
        docker tag $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:latest
        docker push $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG
        docker push $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:latest

    - name: backend push to ECR
      id: build-image-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:$BACKEND_TAG .
        docker tag $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:$BACKEND_TAG $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:latest
        docker push $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:$BACKEND_TAG
        docker push $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:latest

    - name: Deploy to ECS
      run: |
        aws ecs update-service --service $ECS_WEBAPP_SERVICE --cluster datecourses-ecs-cluster --force-new-deployment
        aws ecs update-service --service $ECS_BACKEND_SERVICE --cluster datecourses-ecs-cluster --force-new-deployment

