# name: cd-workflow
# on:
#   pull_request:
#     branches:
#       - master
#     types: [closed]
# env:
#   RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
#   AWS_REGION: ap-northeast-1
#   ECS_WEBAPP_SERVICE: datecourses-frontend
#   ECS_BACKEND_SERVICE: datecourses-backend
#   WEBAPP_CONTAINER_NAME: datecourses-frontend-ecr
#   BACKEND_CONTAINER_NAME: datecourses-backend-ecr
#   WEBAPP_TAG: 1.0.0
#   BACKEND_TAG: 1.0.0
# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: webapp push to ECR
#       id: build-image-webapp
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       run: |
#         cd frontend
#         docker build -t $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG .
#         docker tag $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:latest
#         docker push $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:$WEBAPP_TAG
#         docker push $ECR_REGISTRY/$WEBAPP_CONTAINER_NAME:latest

#     - name: backend push to ECR
#       id: build-image-backend
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       run: |
#         cd backend
#         docker build -t $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:$BACKEND_TAG .
#         docker tag $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:$BACKEND_TAG $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:latest
#         docker push $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:$BACKEND_TAG
#         docker push $ECR_REGISTRY/$BACKEND_CONTAINER_NAME:latest

#     - name: Deploy to ECS
#       run: |
#         aws ecs update-service --service $ECS_WEBAPP_SERVICE --cluster datecourses-ecs-cluster --force-new-deployment
#         aws ecs update-service --service $ECS_BACKEND_SERVICE --cluster datecourses-ecs-cluster --force-new-deployment

